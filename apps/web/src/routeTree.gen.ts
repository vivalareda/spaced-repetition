/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ReviewRouteImport } from './routes/review'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as NewRouteImport } from './routes/new'
import { Route as HeroRouteImport } from './routes/hero'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsUserIdRouteImport } from './routes/settings/$userId'

const ReviewRoute = ReviewRouteImport.update({
  id: '/review',
  path: '/review',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const NewRoute = NewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => rootRouteImport,
} as any)
const HeroRoute = HeroRouteImport.update({
  id: '/hero',
  path: '/hero',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsUserIdRoute = SettingsUserIdRouteImport.update({
  id: '/settings/$userId',
  path: '/settings/$userId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/hero': typeof HeroRoute
  '/new': typeof NewRoute
  '/privacy': typeof PrivacyRoute
  '/review': typeof ReviewRoute
  '/settings/$userId': typeof SettingsUserIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/hero': typeof HeroRoute
  '/new': typeof NewRoute
  '/privacy': typeof PrivacyRoute
  '/review': typeof ReviewRoute
  '/settings/$userId': typeof SettingsUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/hero': typeof HeroRoute
  '/new': typeof NewRoute
  '/privacy': typeof PrivacyRoute
  '/review': typeof ReviewRoute
  '/settings/$userId': typeof SettingsUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/hero'
    | '/new'
    | '/privacy'
    | '/review'
    | '/settings/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/hero'
    | '/new'
    | '/privacy'
    | '/review'
    | '/settings/$userId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/hero'
    | '/new'
    | '/privacy'
    | '/review'
    | '/settings/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  HeroRoute: typeof HeroRoute
  NewRoute: typeof NewRoute
  PrivacyRoute: typeof PrivacyRoute
  ReviewRoute: typeof ReviewRoute
  SettingsUserIdRoute: typeof SettingsUserIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/review': {
      id: '/review'
      path: '/review'
      fullPath: '/review'
      preLoaderRoute: typeof ReviewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/new': {
      id: '/new'
      path: '/new'
      fullPath: '/new'
      preLoaderRoute: typeof NewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/hero': {
      id: '/hero'
      path: '/hero'
      fullPath: '/hero'
      preLoaderRoute: typeof HeroRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/$userId': {
      id: '/settings/$userId'
      path: '/settings/$userId'
      fullPath: '/settings/$userId'
      preLoaderRoute: typeof SettingsUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  HeroRoute: HeroRoute,
  NewRoute: NewRoute,
  PrivacyRoute: PrivacyRoute,
  ReviewRoute: ReviewRoute,
  SettingsUserIdRoute: SettingsUserIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
